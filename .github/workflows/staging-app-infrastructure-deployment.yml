name: 'staging-app-infrastructure-deployment'

on:
  push:
    branches: 
      - staging
    paths:
      - "infrastructure/environments/staging/application/**"
      - ".github/workflows/staging-app-infrastructure-deployment.yml"

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: 'build-and-deploy'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_terraform_storage_account: ${{ secrets.TERRAFORM_AZURE_STORAGE_ACCOUNT }}
    runs-on: ubuntu-latest
    environment: staging

    defaults:
      run:
        shell: bash

    steps:
      # Fetches the code from the repository to the environment where the workflow is running.
      - name: Checkout
        uses: actions/checkout@v3

      # Installs and sets up Terraform with the necessary dependencies and authentication using the provided API token.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initializes the Terraform workspace and downloads the required providers and modules.
      - name: Terraform Init
        working-directory: ./infrastructure/environments/staging/application
        run: terraform init

      # Checks that Terraform config files are properly formatted in the specified directory, with the option to continue to the next step even if errors occur.
      - name: Terraform Format
        working-directory: ./infrastructure/environments/staging/application
        run: terraform fmt -check
        continue-on-error: true

      # Ensures Terraform config files in the specified directory are free of syntax errors, with the job failing if errors are found.
      - name: Terraform Validate
        working-directory: ./infrastructure/environments/staging/application
        run: terraform validate 

      # Creates an execution plan of the changes to be made in the infrastructure.
      - name: Terraform Plan
        working-directory: ./infrastructure/environments/staging/application
        run: terraform plan -input=false

      # Applies the execution plan and makes the necessary changes to the infrastructure, while auto-approving the changes without requiring any manual intervention.
      - name: Terraform Apply
        working-directory: ./infrastructure/environments/staging/application
        run: terraform apply -auto-approve -input=false